This is a re-implementation of the Damned-Lies application in Django.
Damned-Lies has been originally written by Danilo Segan
(danilo@gnome.org). This implementation has been written by Claude
Paroz (claude@2xlibre.net) and StÃ©phane Raimbault
(stephane.raimbault@gmail.com).

The former XML files (modules, releases, people, translation teams)
have been replaced by a database.

The Data model is in the /docs directory.


Requirements
============

1 - Django 1.2.X

2 - Python 2.5 (for hashlib module).

3 - jQuery (tested with 1.3.1 / 1.4.2) (http://jquery.com) and plugins:
    * jQuery tablesorter (http://tablesorter.com)
      in /media/js/jquery.tablesorter.min.js
    * jQuery growfield (http://kuindji.com/jquery/growfield/growfield.xml)
      in /media/js/jquery.growfield2.js

4 - South >= 0.6 - http://south.aeracode.org/
    South is a Django extension that allows you to track changes in your models
    over time, and to update the database to reflect those changes.

    See http://south.aeracode.org/wiki/Download for installation instructions

5 - Markdown (python-markdown) for Team presentation markup rendering

6 - [Optional] Django Debug Toolbar
    git clone git://github.com/dcramer/django-debug-toolbar.git
    Define USE_DEBUG_TOOLBAR to True in settings.py to use it.

7 - [Optional] python-openid and django-openid (see OpenID support
    below).

8 - [Optional] python-pyicu for correct sorting in various languages

Installation
============

1 - Rename settings_sample.py to settings.py and review settings
    (please refer to Database configuration below for more
    informations).
    SCRATCHDIR should point to an existing directory, writable by
    the web application user.

2 - Run './manage.py syncdb' then:
    ./manage.py migrate people
    ./manage.py migrate teams
    ./manage.py migrate

    Note: The automatic migration fails on interdependencies.

3 - Configure Sites in admin interface to define the 'View on site'
    link.

4 - Download jQuery and tablesorter .min.js files and copy them in
    /media/js directory. Rename jquery-x.y.z.min.js into jquery.min.js


OpenID support
==============

If you want OpenID support, checkout Simon Willison's django-openid
package:

git clone git://github.com/simonw/django-openid.git

Put it somewhere in your Python path and uncomment 'django_openid' in
your settings.py INSTALLED_APPS.

This package is dependant on the python-openid package to be installed
on your system. Run 'python manage.py syncdb' and here we go!


Databases
=========

It's important to use the Unix Domain Socket connection to obtain good
performances.

PostgreSQL
----------

You just need to define DATABASE_ENGINE = 'postgresql_psycopg2' and
DATABASE_NAME. Leave DATABASE_HOST setting empty to use UDS.

MySQL
-----

Create a database in UTF8, either with default-character-set = utf8
under [mysqld] section in the my.cnf file or with an explicit 'create
database bla charset=utf8;'

In settings.py:

DATABASE_HOST = '/var/run/mysqld/mysqld.sock'

DATABASE_OPTIONS = {
    'read_default_file': '/etc/mysql/my.cnf',
    "init_command": "SET storage_engine=INNODB"
}

Grep for ANSI_QUOTES in the source code to find the models.py which
use a hack to workaround the double quotes interpretation in MySQL.
The best solution is to run the MySQL server with the ANSI_QUOTES
mode: http://dev.mysql.com/doc/refman/5.0/en/server-sql-mode.html
(sql-mode="ANSI_QUOTES" in my.cnf) but it can be dangerous for other
applications.


Running as CGI
==============

If you don't want to setup Django with Apache/mod_python, there is a tutorial
on the Django Wiki:

http://docs.djangoproject.com/en/dev/howto/deployment/fastcgi/
You'll also find a sample init script in the /docs directory.

You can also use Cherokee/SCGI:
http://www.cherokee-project.com/doc/cookbook_django.html


Translations
============

To be able to also extract strings from various database fields, a
wrapper script has been created around standard Django
make_messages. The script also copy po files in /po directory.

Run 'python manage.py update-trans' to update translations when there
are string changes.

After translation files in po directory have been updated, there is
another script to put back po files in
locale/<ll>/LC_MESSAGES/django.po and call Django's compile_messages
command.

Run 'python manage.py compile-trans'.
